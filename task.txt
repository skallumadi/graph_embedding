Comparison of different graph embedding techniques for brain decoding with connectivity matrices.

Data:
UCLA Autism dataset: http://umcd.humanconnectomeproject.org/umcd/default/browse_studies
In the fMRI case:
79 subjects
264 nodes (regions in the brain)
2 classes (Autism, Typically developing) 42 subjects -> autism, 37 subjects -> typically developing

Task:
Compare the brain decoding results when using:
-Simple embedding (unfolding the connectivity matrices of each sample)
-Different embedding techniques based on complex network measures (e.g. node_centrality, node_closseness_centrality, node_betweeness_centrality, node_eigenvector_centrality, node_communicability_centrality, node_load_centrality). This would be the proposal in this case....to the best of my knowledge this kind of embeddings has not been used before.
-Graph kernels (Weisfeiler_lehman and shortest_path graph kernels). I expect them to fail in this problem, because the kernels don't use the information that there is a correspondence between nodes for all graphs (fixed cardinality vertex sequence property). So, in the current definition of graph kernels they are not using this valuable information. 

Most of the above mentioned methods depend on one or more parameters. I think it is important to understand those parameters and to create hypothesis on what kind of parameters values should produce the best results.

Code:
-code.py
  It has a simple code to read the dataset, compute the simple embedding and the embedding techniques based on complex network theory, a 10-fold cross-validation procedure to compute the accuracy of the methods, and a simple plot to see the data we are creating after the embedding.
The idea is to try different methods for the encoding, different classifiers, different parameters configuration, etc. 
  Moreover, you should add the comparison with the graph kernels. For that, you should add the code for the computation of kernel matrices (I will give you the code of the two kernels I am mentioning above).

